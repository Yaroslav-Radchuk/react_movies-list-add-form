{"version":3,"sources":["components/MovieCard/MovieCard.tsx","components/MoviesList/MoviesList.tsx","components/TextField/TextField.tsx","components/NewMovie/NewMovie.tsx","App.tsx","index.tsx"],"names":["MovieCard","movie","className","src","imgUrl","alt","title","description","href","imdbUrl","MoviesList","movies","map","imdbId","Input","TextField","name","value","label","required","onBlur","onChange","isError","useState","Math","random","toString","slice","id","hasError","htmlFor","classNames","type","placeholder","pattern","NewMovie","onAdd","count","setCount","isImgUrlValid","setIsImgUrlValid","isImdbUrlValid","setIsImdbUrlValid","inputValues","setInputValues","setMovie","handleOnBlur","event","target","TITLE","trim","IMGURL","test","IMDBURL","IMDBID","handleChange","prevState","notActiveButton","onSubmit","preventDefault","disabled","App","moviesFromServer","setMovies","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.9b81cd29.chunk.js","sourcesContent":["import React from 'react';\nimport { Movie } from '../../types/Movie';\nimport './MovieCard.scss';\n\ntype Props = {\n  movie: Movie,\n};\n\nexport const MovieCard: React.FC<Props> = ({ movie }) => (\n  <div className=\"card\" data-cy=\"movie-card\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          src={movie.imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\">{movie.title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\">\n        {movie.description}\n        <br />\n        <a href={movie.imdbUrl}>IMDB</a>\n      </div>\n    </div>\n  </div>\n);\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\nimport { Movie } from '../../types/Movie';\n\ninterface Props {\n  movies: Movie[];\n}\n\nexport const MoviesList: React.FC<Props> = ({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard\n        key={movie.imdbId}\n        movie={movie}\n      />\n    ))}\n  </div>\n);\n","import classNames from 'classnames';\nimport React, { useState } from 'react';\nimport { ChangeEvent } from '../../types/Movie';\n\ntype Props = {\n  name: string,\n  value: string,\n  label?: string,\n  required?: boolean,\n  onBlur: (event: React.FocusEvent<HTMLInputElement, Element>) => void,\n  onChange?: (newValue: ChangeEvent) => void,\n  isError?: boolean,\n};\n\nfunction getRandomDigits() {\n  return Math.random().toString().slice(2);\n}\n\nexport const TextField: React.FC<Props> = ({\n  name,\n  value,\n  label = name,\n  required = false,\n  onBlur,\n  onChange,\n  isError,\n}) => {\n  // generage a unique id once on component load\n  const [id] = useState(() => `${name}-${getRandomDigits()}`);\n\n  // To show errors only if the field was touched (onBlur)\n  const hasError = required && isError;\n\n  return (\n    <div className=\"field\">\n      <label className=\"label\" htmlFor={id}>\n        {label}\n      </label>\n\n      <div className=\"control\">\n        <input\n          id={id}\n          name={name}\n          data-cy={`movie-${name}`}\n          className={classNames('input', {\n            'is-danger': hasError,\n          })}\n          type=\"text\"\n          placeholder={`Enter ${label}`}\n          value={value}\n          onChange={onChange}\n          onBlur={onBlur}\n        />\n      </div>\n\n      {hasError && (\n        <p className=\"help is-danger\">{`${label} is required`}</p>\n      )}\n    </div>\n  );\n};\n","import React, { useState } from 'react';\nimport { Movie, ChangeEvent, InputValues } from '../../types/Movie';\nimport { TextField } from '../TextField';\n\ntype Props = {\n  onAdd: (movie: Movie) => void,\n};\n\nenum Input {\n  TITLE = 'title',\n  IMGURL = 'imgUrl',\n  IMDBURL = 'imdbUrl',\n  IMDBID = 'imdbId',\n}\n\n// eslint-disable-next-line\nexport const pattern = /^((([A-Za-z]{3,9}:(?:\\/\\/)?)(?:[-;:&=+$,\\w]+@)?[A-Za-z0-9.-]+|(?:www\\.|[-;:&=+$,\\w]+@)[A-Za-z0-9.-]+)((?:\\/[+~%/.\\w-_]*)?\\??(?:[-+=&;%@.\\w_]*)#?(?:[.!/\\\\\\w]*))?)$/;\n\nexport const NewMovie: React.FC<Props> = (({ onAdd }) => {\n  const [count, setCount] = useState(0);\n  const [isImgUrlValid, setIsImgUrlValid] = useState(false);\n  const [isImdbUrlValid, setIsImdbUrlValid] = useState(false);\n  const [inputValues, setInputValues] = useState<InputValues>({\n    title: false,\n    imgUrl: false,\n    imdbUrl: false,\n    imdbId: false,\n  });\n  const [movie, setMovie] = useState({\n    title: '',\n    description: '',\n    imgUrl: '',\n    imdbUrl: '',\n    imdbId: '',\n  });\n\n  const reset = () => {\n    setMovie({\n      title: '',\n      description: '',\n      imgUrl: '',\n      imdbUrl: '',\n      imdbId: '',\n    });\n    setInputValues({\n      title: false,\n      imgUrl: false,\n      imdbUrl: false,\n      imdbId: false,\n    });\n    setCount(0);\n  };\n\n  const handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    if (\n      movie.title\n      && movie.imgUrl\n      && movie.imdbUrl\n      && movie.imdbId\n    ) {\n      onAdd(movie);\n      setCount(count + 1);\n      reset();\n    }\n  };\n\n  const handleOnBlur = (event: React.FocusEvent<HTMLInputElement, Element>) => {\n    const { name, value } = event.target;\n\n    switch (name) {\n      case Input.TITLE:\n        if (!movie.title.trim()) {\n          setInputValues({\n            ...inputValues,\n            title: true,\n          });\n        }\n\n        break;\n\n      case Input.IMGURL:\n        if (!movie.imgUrl || !pattern.test(value)) {\n          setInputValues({\n            ...inputValues,\n            imgUrl: true,\n          });\n\n          setIsImgUrlValid(true);\n        }\n\n        break;\n\n      case Input.IMDBURL:\n        if (!movie.imdbUrl || !pattern.test(value)) {\n          setInputValues({\n            ...inputValues,\n            imdbUrl: true,\n          });\n\n          setIsImdbUrlValid(true);\n        }\n\n        break;\n\n      case Input.IMDBID:\n        if (!movie.imdbId.trim()) {\n          setInputValues({\n            ...inputValues,\n            imdbId: true,\n          });\n        }\n\n        break;\n\n      default:\n        break;\n    }\n  };\n\n  const handleChange = (event: ChangeEvent) => {\n    const { name, value } = event.target;\n\n    setMovie(prevState => ({\n      ...prevState,\n      [name]: value,\n    }));\n\n    if (name === Input.TITLE) {\n      setInputValues({\n        ...inputValues,\n        title: false,\n      });\n    }\n\n    if (name === Input.IMGURL) {\n      setInputValues({\n        ...inputValues,\n        imgUrl: false,\n      });\n\n      setIsImgUrlValid(false);\n    }\n\n    if (name === Input.IMDBURL) {\n      setInputValues({\n        ...inputValues,\n        imdbUrl: false,\n      });\n\n      setIsImdbUrlValid(false);\n    }\n\n    if (name === Input.IMDBID) {\n      setInputValues({\n        ...inputValues,\n        imdbId: false,\n      });\n    }\n  };\n\n  const notActiveButton = (\n    !movie.title\n    || !movie.imdbId\n    || isImgUrlValid\n    || isImdbUrlValid\n  );\n\n  return (\n    <form\n      className=\"NewMovie\"\n      key={count}\n      onSubmit={handleSubmit}\n    >\n      <h2 className=\"title\">Add a movie</h2>\n\n      <TextField\n        name=\"title\"\n        label=\"Title\"\n        value={movie.title}\n        onChange={handleChange}\n        onBlur={handleOnBlur}\n        isError={inputValues.title}\n        required\n      />\n\n      <TextField\n        name=\"description\"\n        label=\"Description\"\n        value={movie.description}\n        onChange={handleChange}\n        onBlur={handleOnBlur}\n      />\n\n      <TextField\n        name=\"imgUrl\"\n        label=\"Image URL\"\n        value={movie.imgUrl}\n        onChange={handleChange}\n        onBlur={handleOnBlur}\n        isError={inputValues.imgUrl}\n        required\n      />\n\n      <TextField\n        name=\"imdbUrl\"\n        label=\"Imdb URL\"\n        value={movie.imdbUrl}\n        onChange={handleChange}\n        onBlur={handleOnBlur}\n        isError={inputValues.imdbUrl}\n        required\n      />\n\n      <TextField\n        name=\"imdbId\"\n        label=\"Imdb ID\"\n        value={movie.imdbId}\n        onChange={handleChange}\n        onBlur={handleOnBlur}\n        isError={inputValues.imdbId}\n        required\n      />\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            data-cy=\"submit-button\"\n            className=\"button is-link\"\n            value=\"submit\"\n            disabled={notActiveButton}\n          >\n            Add\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n});\n","import { useState } from 'react';\nimport './App.scss';\nimport { MoviesList } from './components/MoviesList';\nimport { NewMovie } from './components/NewMovie';\nimport moviesFromServer from './api/movies.json';\nimport { Movie } from './types/Movie';\n\nexport const App: React.FC = () => {\n  const [movies, setMovies] = useState([...moviesFromServer]);\n\n  const addMovie = (movie: Movie) => {\n    setMovies([...movies, movie]);\n  };\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        <MoviesList movies={movies} />\n      </div>\n      <div className=\"sidebar\">\n        <NewMovie onAdd={addMovie} />\n      </div>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}